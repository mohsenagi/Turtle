{"version":3,"sources":["components/gridComp.js","components/path.js","components/uploadForm.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","useEffect","canvas","document","getElementById","context","getContext","width","height","bw","bh","lineWidth","x","moveTo","lineTo","y","strokeStyle","stroke","drawTens","drawFives","beginPath","font","fillStyle","fillText","axesNumbers","className","id","Path","arraysDict","lineColour","dotSize","dotColor","console","log","locationHistory","duplicates","clearRect","drawDot","centerX","centerY","centerXCanvas","centerYCanvas","arc","Math","PI","fill","i","interval","setInterval","startIndex","length","startX","startY","setTimeout","j","clearInterval","endX","endY","startXCanvas","startYCanvas","endXCanvas","endYCanvas","drawStep","UploadForm","useState","message","setmessage","selectedFile","useRef","handleSubmit","event","a","preventDefault","current","files","formData","FormData","append","name","fetch","method","body","response","json","result","status","statusText","updatePoints","value","alert","msg","onSubmit","ref","type","App","setarraysDict","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8e2309ba.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nfunction Grid(props) {\r\n    useEffect(() => {\r\n        const canvas = document.getElementById(\"myGrid\");\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        // canvas size is 2500 by 2500 so the centre (0, 0) is (1250, -1250)\r\n        canvas.width = 2500;\r\n        canvas.height = 2500;\r\n        const bw = canvas.width;\r\n        const bh = canvas.height;\r\n\r\n        const drawTens = () => {\r\n            context.lineWidth = 4;\r\n            for (let x = 50; x <= bw; x += 200) {\r\n                context.moveTo(x, 0);\r\n                context.lineTo(x, bh);\r\n            }\r\n\r\n            for (let y = 50; y <= bh; y += 200) {\r\n                context.moveTo(0, y);\r\n                context.lineTo(bw, y);\r\n            }\r\n            context.strokeStyle = \"rgb(170, 170, 170)\" ;\r\n            context.stroke();\r\n        }\r\n\r\n        const drawFives = () => {\r\n            context.lineWidth = 3;\r\n            for (let x = 150; x <= bw; x += 200) {\r\n                context.moveTo(x, 0);\r\n                context.lineTo(x, bh);\r\n            }\r\n\r\n            for (let y = 150; y <= bh; y += 200) {\r\n                context.moveTo(0, y);\r\n                context.lineTo(bw, y);\r\n            }\r\n            context.strokeStyle = \"rgb(170, 170, 170)\" ;\r\n            context.stroke();\r\n        }\r\n\r\n        const drawAxis = () => {\r\n            context.lineWidth = 4;\r\n            context.beginPath();\r\n            context.strokeStyle = \"rgb(170, 170, 170)\";\r\n            context.moveTo(1250, 0);\r\n            context.lineTo(1250, 2500);\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.strokeStyle = \"rgb(170, 170, 170)\";\r\n            context.moveTo(0, 1250);\r\n            context.lineTo(2500, 1250);\r\n            context.stroke();\r\n        }\r\n\r\n        const axesNumbers = () => {\r\n            context.font = \"45px Calibri bold\";\r\n            context.fillStyle = \"rgb(130, 130, 130)\";\r\n            for (let x = 50; x <= 1050; x += 200) {\r\n                context.fillText(`${(x/20)-62.5}`, x-10, 1240);\r\n            }\r\n            for (let x = 1450; x <= 2450; x += 200) {\r\n                context.fillText(`${(x/20)-62.5}`, x+5, 1290);\r\n            }\r\n            for (let y = 50; y <= 1050; y += 200) {\r\n                if (y !==1000) context.fillText(`${62.5-(y/20)}`, 1260, y+15);\r\n            }\r\n            for (let y = 1450; y <= 2450; y += 200) {\r\n                if (y !==1000) context.fillText(`${62.5-(y/20)}`, 1180, y+15);\r\n            }\r\n        }\r\n        drawTens();  \r\n        drawFives();  \r\n        drawAxis();\r\n        axesNumbers();\r\n    }, []);\r\n    return (\r\n      <div className=\"grid\">\r\n          <canvas id=\"myGrid\"></canvas>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport {Grid}","import React, { useEffect } from 'react';\r\n\r\nfunction Path(props) {\r\n    let {id, arraysDict, lineColour, lineWidth, dotSize, dotColor} = props;\r\n    console.log(id)\r\n\r\n    useEffect(() => {\r\n        let locationHistory = arraysDict.locationHistory;\r\n        let duplicates = arraysDict.duplicates;\r\n        const canvas = document.getElementById(id);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        // canvas size is 2500 by 2500 so the centre (0, 0) is (1250, -1250)\r\n        canvas.width = 2500;\r\n        canvas.height = 2500;\r\n        \r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        const drawDot = (centerX, centerY, dotSize, dotColor, lineWidth) => {\r\n            \r\n            // convert location's X and Y to the corresponding point on Canvas\r\n            let centerXCanvas = 1250+centerX*20;\r\n            let centerYCanvas = 1250-centerY*20;\r\n            \r\n            context.beginPath();\r\n            context.arc(centerXCanvas, centerYCanvas, dotSize, 0, 2 * Math.PI, false);\r\n            context.fillStyle = dotColor;\r\n            context.fill();\r\n            context.lineWidth = lineWidth;\r\n            context.strokeStyle = dotColor;\r\n            context.stroke();\r\n        };\r\n        \r\n        const drawStep = (startIndex, locationHistory, lineWidth, lineColour, duplicates, dotSize, dotColor) => {\r\n            if (locationHistory.length > 0){\r\n                let [startX, startY] = locationHistory[startIndex];\r\n                if (startIndex === locationHistory.length-1) {\r\n    \r\n                    // setTimeout is used to delay the drawing of the final point after the path is drawn\r\n                    setTimeout(() => {\r\n                        drawDot(startX, startY, dotSize*3, \"rgb(0, 0, 0)\");\r\n                    }, 500);\r\n    \r\n                    // setTimeout is used to delay the drawing of the duplicate points after the path and final point are drawn\r\n                    setTimeout(() => {\r\n                        for (let j = 0; j < duplicates.length; j++) {\r\n                            drawDot(duplicates[j][0], duplicates[j][1], dotSize, dotColor, lineWidth);\r\n                        };\r\n                    }, 750);\r\n\r\n                    clearInterval(interval);\r\n                \r\n                } else {\r\n                    let [endX, endY] = locationHistory[startIndex+1];\r\n                    \r\n                    // convert location's X and Y to the corresponding point on Canvas\r\n                    let startXCanvas = 1250+startX*20;\r\n                    let startYCanvas = 1250-startY*20;\r\n                    let endXCanvas = 1250+endX*20;\r\n                    let endYCanvas = 1250-endY*20;\r\n                    \r\n                    context.lineWidth = lineWidth;\r\n                    context.strokeStyle = lineColour;\r\n                    context.beginPath();\r\n                    context.moveTo(startXCanvas, startYCanvas);\r\n                    context.lineTo(endXCanvas, endYCanvas);\r\n                    context.stroke();\r\n                    i+=1;\r\n                };\r\n            } else {\r\n                clearInterval(interval);\r\n            }\r\n        };\r\n\r\n        let i = 0;\r\n        // setInterval is used to animate the drawing of the path\r\n        let interval = setInterval(() => drawStep(i, locationHistory, lineWidth, lineColour, duplicates, dotSize, dotColor), 10);\r\n\r\n        return () => clearInterval(interval); // to clean up before the component is updated\r\n    });\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            <canvas id={id}></canvas>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Path };","import React, { useRef, useState } from \"react\";\r\n\r\nfunction UploadForm(props) {\r\n  const [message, setmessage] = useState(\"\");\r\n  const selectedFile = useRef(null);\r\n\r\n  const apiUrls = {\r\n    development: \"http://127.0.0.1:5000/\", // npm start\r\n    production: \"\"\r\n  };\r\n  let baseUrl = apiUrls[process.env.NODE_ENV];\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (selectedFile.current.files[0]) {\r\n      const formData = new FormData();\r\n      formData.append( \r\n        \"file\", \r\n        selectedFile.current.files[0],\r\n        selectedFile.current.files[0].name\r\n      );\r\n      try {\r\n        const response = await fetch(baseUrl + \"uploader\", {\r\n          method: 'POST',\r\n          body: formData\r\n        });\r\n        let result = await response.json();\r\n        result.status = response.status;\r\n        result.statusText = response.statusText;\r\n        if (result.status === 200){\r\n          props.updatePoints(result.locationHistory, result.duplicates);\r\n          setmessage('Uploaded Successfully');\r\n          selectedFile.current.value = null;\r\n          setTimeout(() => {\r\n            setmessage(\"\");\r\n          }, 2000);\r\n        };\r\n        if (result.status === 400) {\r\n          alert(result.msg);\r\n        };\r\n      } catch (error) {\r\n        setmessage(`We are sorry!! something went wrong while uploading the file.\\n${error}`);\r\n      };\r\n    };\r\n  };\r\n  return (\r\n      <div className=\"container\">\r\n          <form onSubmit={handleSubmit}>\r\n              <div className=\"form-group files\">\r\n                <label>upload your single txt file to see the path</label>\r\n                <input ref={selectedFile} type=\"file\" className=\"form-control\"/>\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-success\">Upload</button>\r\n              <p>{message}</p>\r\n          </form>\r\n      </div>\r\n  );\r\n};\r\n  \r\nexport {UploadForm};\r\n  ","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport { Grid } from \"./components/gridComp.js\";\nimport { Path } from \"./components/path.js\";\nimport { UploadForm } from \"./components/uploadForm.js\";\n\nfunction App() {\n  // arrayDict stores all location points in locationHistory array and all duplicate points in duplicates array\n  const[arraysDict, setarraysDict] = useState({'locationHistory' : [], 'duplicates' : []});\n\n  const updatePoints = (locationHistory, duplicates) => {\n    setarraysDict({'locationHistory' : locationHistory, 'duplicates' : duplicates});\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        <div className=\"canvasWrapper\">\n          <Grid />\n          <Path\n            id={\"path\"}\n            arraysDict={arraysDict}\n            lineColour={\"rgb(0, 0, 255)\"}\n            lineWidth = {4}\n            dotSize = {3}\n            dotColor = {\"rgb(255, 0, 0)\"}\n            />\n        </div>\n        <UploadForm\n          updatePoints = {updatePoints}\n        />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}